{"version":3,"sources":["index.js"],"names":["tf","pascalvoc","_callee2","model","_Users_narendra_Desktop_ADLOID_realtime_semantic_segmentation_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context2","prev","next","sent","abrupt","stop","modelPromise","load_model","App","videoRef","React","createRef","canvasRef","detectFrame","video","startScope","predictions","predict","_this","process_input","renderPredictions","requestAnimationFrame","endScope","_callee","img_shape","offset","segmPred","segmMask","width","height","data","bytes","i","partId","j","color","out","ctx","_context","resizeBilinear","transpose","argMax","reshape","shape","slice","Uint8ClampedArray","Error","concat","ImageData","current","getContext","scale","putImageData","_this2","this","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","then","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","all","values","catch","error","console","video_frame","img","fromPixels","toFloat","mean","std","div","sub","expandDims","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","style","className","autoPlay","playsInline","muted","ref","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b20286ec.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as tf from '@tensorflow/tfjs';\nimport \"./styles.css\";\ntf.setBackend('webgl');\n\nconst pascalvoc = [[ 0,0,0 ],[ 128,0,0 ],[ 0,128,0 ],\n                    [ 128,128,0 ],[ 0,0,128 ],[ 128,0,128 ],\n                    [ 0,128,128 ],[ 128,128,128 ],[ 64,0,0 ],\n                    [ 192,0,0 ],[ 64,128,0 ],[ 192,128,0 ],\n                    [ 64,0,128 ],[ 192,0,128 ],[ 64,128,128 ],\n                    [ 192,128,128 ],[ 0,64,0 ],[ 128,64,0 ],\n                    [ 0,192,0 ],[ 128,192,0 ],[ 0,64,128 ],\n                    [ 128,64,128 ],[ 0,192,128 ],[ 128,192,128 ],\n                    [ 64,64,0 ],[ 192,64,0 ],[ 64,192,0 ],\n                    [ 192,192,0 ],[ 64,64,128 ],[ 192,64,128 ],\n                    [ 64,192,128 ],[ 192,192,128 ],[ 0,0,64 ],\n                    [ 128,0,64 ],[ 0,128,64 ],[ 128,128,64 ],\n                    [ 0,0,192 ],[ 128,0,192 ],[ 0,128,192 ],\n                    [ 128,128,192 ],[ 64,0,64 ]];\n\n\nasync function load_model() {\n  const model = await tf.loadLayersModel(\"http://127.0.0.1:8080/model.json\");\n  return model;\n}\n\nconst modelPromise = load_model();\n\nclass App extends React.Component {\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n      tf.engine().startScope();\n      const predictions = model.predict(this.process_input(video));\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n      tf.engine().endScope();\n  };\n\n  process_input(video_frame){\n    const img = tf.browser.fromPixels(video_frame).toFloat();\n    const scale = tf.scalar(255.);\n    const mean = tf.tensor3d([0.485, 0.456, 0.406], [1,1,3]);\n    const std = tf.tensor3d([0.229, 0.224, 0.225], [1,1,3]);\n    const normalised = img.div(scale).sub(mean).div(std);\n    const batched = normalised.transpose([2,0,1]).expandDims();\n    return batched;\n  };\n    renderPredictions = async (predictions) => {\n    const img_shape = [480, 480]\n    const offset = 0;\n    const segmPred = tf.image.resizeBilinear(predictions.transpose([0,2,3,1]),\n                                              img_shape);\n    const segmMask = segmPred.argMax(3).reshape(img_shape);\n    const width = segmMask.shape.slice(0, 1);\n    const height = segmMask.shape.slice(1, 2);\n    const data = await segmMask.data();\n    const bytes = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < height * width; ++i) {\n      const partId = data[i];\n      const j = i * 4;\n      if (partId === -1) {\n          bytes[j + 0] = 255;\n          bytes[j + 1] = 255;\n          bytes[j + 2] = 255;\n          bytes[j + 3] = 255;\n      } else {\n          const color = pascalvoc[partId + offset];\n\n          if (!color) {\n              throw new Error(`No color could be found for part id ${partId}`);\n          }\n          bytes[j + 0] = color[0];\n          bytes[j + 1] = color[1];\n          bytes[j + 2] = color[2];\n          bytes[j + 3] = 255;\n      }\n    }\n    const out = new ImageData(bytes, width, height);\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.scale(1.5, 1.5);\n    ctx.putImageData(out, 520, 60);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Real-Time Semantic Segmentation</h1>\n        <h3>Refine Net</h3>\n        <video\n          style={{height: '600px', width: \"480px\"}}\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n          width= \"480\"\n          height= \"480\"\n        />\n        <canvas\n          className=\"size\"\n          ref={this.canvasRef}\n          width=\"960\"\n          height=\"480\"\n        />\n      </div>\n    );\n  }\n\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}